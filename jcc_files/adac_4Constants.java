/* Generated By:JavaCC: Do not edit this line. adac_4Constants.java */
package traductor;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface adac_4Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int LETTER = 6;
  /** RegularExpression Id. */
  int DIGIT = 7;
  /** RegularExpression Id. */
  int ALPHANUM = 8;
  /** RegularExpression Id. */
  int tBEGIN = 9;
  /** RegularExpression Id. */
  int tBOOL = 10;
  /** RegularExpression Id. */
  int tCHAR = 11;
  /** RegularExpression Id. */
  int tINT = 12;
  /** RegularExpression Id. */
  int tVINT = 13;
  /** RegularExpression Id. */
  int tVCHAR = 14;
  /** RegularExpression Id. */
  int tTRUE = 15;
  /** RegularExpression Id. */
  int tFALSE = 16;
  /** RegularExpression Id. */
  int tVSTRING = 17;
  /** RegularExpression Id. */
  int tC = 18;
  /** RegularExpression Id. */
  int tPC = 19;
  /** RegularExpression Id. */
  int tSBR = 20;
  /** RegularExpression Id. */
  int tEBR = 21;
  /** RegularExpression Id. */
  int tISQBR = 22;
  /** RegularExpression Id. */
  int tESQBR = 23;
  /** RegularExpression Id. */
  int tLESS = 24;
  /** RegularExpression Id. */
  int tMORE = 25;
  /** RegularExpression Id. */
  int tLESSEQ = 26;
  /** RegularExpression Id. */
  int tMOREEQ = 27;
  /** RegularExpression Id. */
  int tNOTEQ = 28;
  /** RegularExpression Id. */
  int tASSIGN = 29;
  /** RegularExpression Id. */
  int tEQ = 30;
  /** RegularExpression Id. */
  int tNEG = 31;
  /** RegularExpression Id. */
  int tPOS = 32;
  /** RegularExpression Id. */
  int tMUL = 33;
  /** RegularExpression Id. */
  int tDIV = 34;
  /** RegularExpression Id. */
  int tMOD = 35;
  /** RegularExpression Id. */
  int tAND = 36;
  /** RegularExpression Id. */
  int tNOT = 37;
  /** RegularExpression Id. */
  int tOR = 38;
  /** RegularExpression Id. */
  int tPROC = 39;
  /** RegularExpression Id. */
  int tFUNCT = 40;
  /** RegularExpression Id. */
  int tRETURN = 41;
  /** RegularExpression Id. */
  int tVAL = 42;
  /** RegularExpression Id. */
  int tREF = 43;
  /** RegularExpression Id. */
  int tIS = 44;
  /** RegularExpression Id. */
  int tPUT = 45;
  /** RegularExpression Id. */
  int tPUTL = 46;
  /** RegularExpression Id. */
  int tSKIP = 47;
  /** RegularExpression Id. */
  int tGET = 48;
  /** RegularExpression Id. */
  int tI2C = 49;
  /** RegularExpression Id. */
  int tC2I = 50;
  /** RegularExpression Id. */
  int tEND = 51;
  /** RegularExpression Id. */
  int tIF = 52;
  /** RegularExpression Id. */
  int tELSE = 53;
  /** RegularExpression Id. */
  int tWHILE = 54;
  /** RegularExpression Id. */
  int tDO = 55;
  /** RegularExpression Id. */
  int tTHEN = 56;
  /** RegularExpression Id. */
  int tID = 57;
  /** RegularExpression Id. */
  int tDEF = 58;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<SINGLE_LINE_COMMENT>",
    "<LETTER>",
    "<DIGIT>",
    "<ALPHANUM>",
    "\"begin\"",
    "\"boolean\"",
    "\"character\"",
    "\"integer\"",
    "<tVINT>",
    "<tVCHAR>",
    "\"true\"",
    "\"false\"",
    "<tVSTRING>",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\":=\"",
    "\"=\"",
    "\"-\"",
    "\"+\"",
    "\"*\"",
    "\"div\"",
    "\"mod\"",
    "\"and\"",
    "\"not\"",
    "\"or\"",
    "\"procedure\"",
    "\"function\"",
    "\"return\"",
    "\"val\"",
    "\"ref\"",
    "\"is\"",
    "\"put\"",
    "\"put_line\"",
    "\"skip_line\"",
    "\"get\"",
    "\"int2char\"",
    "\"char2int\"",
    "\"end\"",
    "\"if\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"then\"",
    "<tID>",
    "<tDEF>",
  };

}
